You are writing a concise executive summary for a manager about a single software project. Keep it brief, business-focused, and avoid technical jargon.

PROJECT: {{ project.name }}
OWNER: {{ project.owner }}

{% if project.readme_info and project.readme_info.found %}
PROJECT PURPOSE (from README):
{{ project.readme_info.content }}
{% elif project.github_metadata and project.github_metadata.description %}
PROJECT PURPOSE (from GitHub):
{{ project.github_metadata.description }}
{% else %}
PROJECT PURPOSE: No description available in README or GitHub metadata.
{% endif %}

TECHNICAL METRICS:
{{ project_json }}

Write a 2-3 sentence executive summary that covers:
- What this project does (using the README/description context above)
- Current health and activity level
- Key concerns or highlights for management attention

Focus on business impact, risk assessment, and resource implications. Keep it under 100 words and suitable for a manager who needs the key points quickly. Use the README content to explain the project's purpose in business terms, then connect the technical metrics to business outcomes.

Formatting requirements (important):
- Output GitHub-Flavored Markdown only (no HTML, no code fences).
- Use a compact structure with bolded labels, for example:
  - **Overview:** one short sentence on purpose and value
  - **Status:** one short sentence on activity/engagement
  - **Risks/Actions:** one short sentence with key risk or next step
- Avoid tables; keep to 40–100 words total.

Constraints and phrasing (important):
- Prefer small, concrete, low-effort actions over process or staffing recommendations.
- If this project uses PHP/Composer (infer from `project_json` languages/dependencies), phrase dependency remediation as a quick step, e.g., “Run composer update; re-run tests; merge”.
- Avoid suggesting pair-programming, onboarding, or consolidation unless clearly missing per `project_json`.
 - If `project.github_metadata.is_private` is true, do NOT mention stars, forks, or adoption; focus on internal activity (commits, contributors) and maintenance.
 - Do not infer or restate team size or organization size. Avoid calling out “single maintainer” unless there is clear bus-factor risk; otherwise omit.
 - Prioritize vulnerability severity. Mention Critical/High explicitly; treat Medium/Low as routine maintenance.
